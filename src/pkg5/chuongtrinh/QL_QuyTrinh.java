/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pkg5.chuongtrinh;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import static pkg5.chuongtrinh.Constant.pathGiangVien;
import static pkg5.chuongtrinh.Constant.pathGiaoTrinh;
import static pkg5.chuongtrinh.Constant.pathKhoa;
import pkg5.chuongtrinh.lib.LoadUtil;
import pkg5.chuongtrinh.lib.MapToWriteUtil;
import static pkg5.chuongtrinh.lib.MapToWriteUtil.buildMapTenMonHoc;
import pkg5.chuongtrinh.lib.WriteDataUtil;

/**
 *
 * @author Admin
 */
public class QL_QuyTrinh extends javax.swing.JFrame {

       private ArrayList<GiaoTrinh> dsGiaoTrinh = new ArrayList<>();
       private ArrayList<Khoa> dsKhoa = new ArrayList<>();
       private ArrayList<GiangVien> dsGiangVien = new ArrayList<>();
       
    /**
     * Creates new form QL_QuyTrinh
     */
    public QL_QuyTrinh() {
        initComponents();
        LoadCombo();   
    }
    
    public void LoadFile() {
        try {
            dsGiaoTrinh = LoadUtil.loadGiaoTrinh(pathGiaoTrinh);
            dsKhoa = LoadUtil.loadKhoa(pathKhoa);
            dsGiangVien = LoadUtil.loadGiangVien(pathGiangVien);
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
     
    public void LoadCombo() {
              ArrayList<GiangVien> dsgvk = new ArrayList<>();
              LoadFile();
              cboKhoa.setModel(new DefaultComboBoxModel(dsKhoa.toArray()));
              
              for (GiangVien x : dsGiangVien) {
                     if (x.getKhoa().getTenKhoa().toLowerCase().equals(cboKhoa.getSelectedItem().toString().toLowerCase())) {
                            dsgvk.add(x);
                     }
              }
              cboChuBien.setModel(new DefaultComboBoxModel(dsgvk.toArray()));

              DefaultListModel<String> model = new DefaultListModel<>();
              for (GiangVien x : dsGiangVien) {
                     if (x.getKhoa().getTenKhoa().toLowerCase().equals(cboKhoa.getSelectedItem().toString().toLowerCase())) {
                            model.addElement(x.getTenGV());
                     }

              }
              listCacTacGia.setModel(model);
       }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblGiaoTrinh = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tbMaGT = new javax.swing.JTextField();
        tbTenGT = new javax.swing.JTextField();
        tbTenMon = new javax.swing.JTextField();
        btnThem = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnDangKi = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        tbsoTC = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        tbTGBD = new javax.swing.JTextField();
        tbTGKT = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        cboxTim = new javax.swing.JComboBox<>();
        btnQuayLai = new javax.swing.JButton();
        btnTim = new javax.swing.JButton();
        cboKhoa = new javax.swing.JComboBox<>();
        cboChuBien = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listCacTacGia = new javax.swing.JList<>();
        btnHuy = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("QUẢN LÝ QUY TRÌNH:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Danh sách giáo trình trong kế hoạch:");

        tblGiaoTrinh.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã GT", "Tên GT", "Tên Môn", "Số TC", "Chủ Biên", "Các tác giả", "Khoa", "TG Bắt Đầu", "TG Kết Thúc", "Trạng Thái"
            }
        ));
        tblGiaoTrinh.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tblGiaoTrinhAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        tblGiaoTrinh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblGiaoTrinhMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblGiaoTrinh);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Mã GT");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Tên GT");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Tên Môn");

        tbTenGT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tbTenGT.setPreferredSize(new java.awt.Dimension(64, 30));

        tbTenMon.setPreferredSize(new java.awt.Dimension(64, 30));
        tbTenMon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbTenMonActionPerformed(evt);
            }
        });

        btnThem.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnSua.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        btnXoa.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnDangKi.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDangKi.setText("Đăng Kí");
        btnDangKi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDangKiActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Số TC");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Khoa");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Chủ Biên");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("Các tác giả");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("TG Bắt Đầu");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setText("TG Kết Thúc");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setText("Tìm Kiếm Theo:");

        cboxTim.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cboxTim.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mã GT", "Tên GT", "Tên Môn", "Số TC", "Khoa", "Chủ Biên", "Thời Gian", " " }));

        btnQuayLai.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnQuayLai.setText("Quay lại");
        btnQuayLai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuayLaiActionPerformed(evt);
            }
        });

        btnTim.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnTim.setText("Tìm");
        btnTim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimActionPerformed(evt);
            }
        });

        cboKhoa.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboKhoaItemStateChanged(evt);
            }
        });

        cboChuBien.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboChuBien.setSelectedIndex(-1);
        cboChuBien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboChuBienActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(listCacTacGia);

        btnHuy.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnHuy.setText("Hủy Đăng Kí");
        btnHuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHuyActionPerformed(evt);
            }
        });

        btnRefresh.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 939, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(tbMaGT, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)
                        .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(tbTenGT, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)
                        .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(44, 44, 44)
                                    .addComponent(tbTenMon, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(43, 43, 43)
                                    .addComponent(tbsoTC))
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(43, 43, 43)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnDangKi, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnHuy, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(cboKhoa, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cboChuBien, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(cboxTim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnTim, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tbTGBD, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnQuayLai, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tbTGKT, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(2, 6, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(6, 6, 6)
                .addComponent(jLabel2)
                .addGap(6, 6, 6)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(tbMaGT, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tbTenGT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tbTenMon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tbsoTC, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboKhoa, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboxTim, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTim, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboChuBien, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tbTGBD, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tbTGKT, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDangKi, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnHuy, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnQuayLai, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(188, 188, 188)))
                .addGap(79, 79, 79))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    
        public void LoadTable() {
              LoadFile();
              JTable table = new JTable();
              DefaultTableModel model = new DefaultTableModel();
              Object[] columnNames = {"Mã GT", "Tên GT", "Tên Môn", "Số TC", "Chủ Biên", "Tác Giả", "Khoa", "TG Bắt Đầu", "TG Kết Thúc", "Trạng Thái"};
              model.setColumnIdentifiers(columnNames);
              Object[][] rowData = new Object[dsGiaoTrinh.size()][10];
              for (int i = 0; i < dsGiaoTrinh.size(); i++) {
                     rowData[i][0] = dsGiaoTrinh.get(i).getMaGT();
                     rowData[i][1] = dsGiaoTrinh.get(i).getTenGT();
                     rowData[i][2] = dsGiaoTrinh.get(i).getTenMon().getTenMon();
                     rowData[i][3] = dsGiaoTrinh.get(i).getTenMon().getSoTC();
                     rowData[i][4] = dsGiaoTrinh.get(i).getChuBien().getTenGV();
                     rowData[i][5] = dsGiaoTrinh.get(i).getdsTG();
                     rowData[i][6] = dsGiaoTrinh.get(i).getKhoa().getTenKhoa();
                     rowData[i][7] = dsGiaoTrinh.get(i).getTgbd();
                     rowData[i][8] = dsGiaoTrinh.get(i).getTgkt();
                     rowData[i][9] = dsGiaoTrinh.get(i).isDangKy() ? "Đã đăng kí" : "Chưa đăng kí";
              }
              model.setDataVector(rowData, columnNames);
              this.tblGiaoTrinh.setModel(model);
              this.add(new JScrollPane(table));
              this.pack();
              this.setVisible(true);
       }
      
    private void tblGiaoTrinhMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblGiaoTrinhMouseClicked
              LoadFile();
              
              int dongchon = tblGiaoTrinh.getSelectedRow();
              if (dongchon != -1) {
                     GiaoTrinh gt = new GiaoTrinh();
                     gt = dsGiaoTrinh.get(dongchon);
                     tbMaGT.setText(gt.getMaGT());
                     tbTenGT.setText(gt.getTenGT());
                     tbTenMon.setText(gt.getTenMon().getTenMon());
                     tbsoTC.setText(Integer.toString(gt.getTenMon().getSoTC()));
                     //click hien thi cboKhoa
                     for (int i = 0; i < dsKhoa.size(); i++) {
                        if (dsKhoa.get(i).getTenKhoa().equals(gt.getKhoa().getTenKhoa())) {
                            cboKhoa.setSelectedIndex(i);   
                        }                       
                     }
                     //click hien thi cboChuBien
                    ArrayList<GiangVien> dsgvk = new ArrayList<>();
                    for (GiangVien x : dsGiangVien) {
                     if (x.getKhoa().getTenKhoa().toLowerCase().equals(cboKhoa.getSelectedItem().toString().toLowerCase())) {
                            dsgvk.add(x);
                     }                     
                     
                    }
                    for (int i = 0; i < dsgvk.size(); i++) {
                        if (dsgvk.get(i).getTenGV().equals(gt.getChuBien().getTenGV())) {
                            cboChuBien.setSelectedIndex(i);
                            break;
                        }
                    }
                    
                                                 
                     tbTGBD.setText(gt.getTgbd().toString());
                     tbTGKT.setText(gt.getTgkt().toString());
                     
                     
                   DefaultListModel<String> model = new DefaultListModel<>();
                    for (GiangVien x : gt.getCacTacGia()) {
                        model.addElement(x.getTenGV());
                    }
                    listCacTacGia.setModel(model);
                }
    }//GEN-LAST:event_tblGiaoTrinhMouseClicked

    
    private void tblGiaoTrinhAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tblGiaoTrinhAncestorAdded
       LoadTable();
    }//GEN-LAST:event_tblGiaoTrinhAncestorAdded

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
          if (check()) {
                     MonHoc mh = new MonHoc();
                     GiangVien cb = new GiangVien();
                     ArrayList<GiangVien> cactg = new ArrayList<>();
                     Khoa k = new Khoa();
                     mh.setTenMon(tbTenMon.getText());
                     int sotc = Integer.parseInt(tbsoTC.getText());
                     mh.setSoTC(sotc);
                     for (Khoa x : dsKhoa) {
                            if (x.getTenKhoa().toLowerCase().equals(cboKhoa.getSelectedItem().toString().toLowerCase())) {
                                   k = x;
                            }
                     }

                     for (GiangVien x : dsGiangVien) {
                            if (x.getTenGV().toLowerCase().equals(cboChuBien.getSelectedItem().toString().toLowerCase())) {
                                   cb = x;
                            }
                     }


                    List<String> selectedNames = listCacTacGia.getSelectedValuesList();
                    for (String name : selectedNames) {
                            for (GiangVien x : dsGiangVien) {                           
                                   if (x.getTenGV().toLowerCase().equals(name.toLowerCase())) {
                                       if (!cactg.contains(x)) { // Kiểm tra xem x đã tồn tại trong danh sách cactg chưa
                                            cactg.add(x);
                                        }
                                       break;
                                   }
                            }
                     }
                    
                     Date dbd = new Date();
                     String ngaybd = tbTGBD.getText();
                     String[] bd = ngaybd.split("/");
                     dbd.setD(Integer.parseInt(bd[0]));
                     dbd.setM(Integer.parseInt(bd[1]));
                     dbd.setY(Integer.parseInt(bd[2]));
                     Date dkt = new Date();
                     String ngaykt = tbTGKT.getText();
                     String[] kt = ngaykt.split("/");
                     dkt.setD(Integer.parseInt(kt[0]));
                     dkt.setM(Integer.parseInt(kt[1]));
                     dkt.setY(Integer.parseInt(kt[2]));
                     dsGiaoTrinh.add(new GiaoTrinh(tbMaGT.getText(), tbTenGT.getText(), mh, cb, cactg, k, dbd, dkt));
//                     try {
//                            FileOutputStream fo = new FileOutputStream("GIAOTRINH.txt");
//                            ObjectOutputStream out = new ObjectOutputStream(fo);
//                            out.writeObject(dsGiaoTrinh);
//                            out.close();
//                            fo.close();
//                     } catch (FileNotFoundException e) {
//                            e.printStackTrace();
//                     } catch (IOException e) {
//                            e.printStackTrace();
//                     }
                     WriteDataUtil.writeGiaoTrinhData(dsGiaoTrinh);
                     
                     LoadTable();
                     JOptionPane.showMessageDialog(rootPane, "Thêm thành công!");
              }        
    }//GEN-LAST:event_btnThemActionPerformed

    
    private void cboKhoaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboKhoaItemStateChanged
         ArrayList<GiangVien> dsgvk = new ArrayList<>();
              for (GiangVien x : dsGiangVien) {
                     if (x.getKhoa().getTenKhoa().toLowerCase().equals(cboKhoa.getSelectedItem().toString().toLowerCase())) {
                            dsgvk.add(x);
                     }
              }
              cboChuBien.setModel(new DefaultComboBoxModel(dsgvk.toArray()));

              DefaultListModel<String> model = new DefaultListModel<>();
              for (GiangVien x : dsGiangVien) {
                     if (x.getKhoa().getTenKhoa().toLowerCase().equals(cboKhoa.getSelectedItem().toString().toLowerCase())) {
                            model.addElement(x.getTenGV());
                     }

              }

              listCacTacGia.setModel(model);
    }//GEN-LAST:event_cboKhoaItemStateChanged

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        LoadFile();
              int dongchon = tblGiaoTrinh.getSelectedRow();
              if (dongchon != -1) {

                     Iterator<GiaoTrinh> itr = dsGiaoTrinh.iterator();
                     while (itr.hasNext()) {
                            GiaoTrinh gt = itr.next();
                            if (tbMaGT.getText().equals(gt.getMaGT())) {
                                   itr.remove();
                            }
                     }
//                     try {
//                            FileOutputStream fo = new FileOutputStream("GIAOTRINH.txt");
//                            ObjectOutputStream out = new ObjectOutputStream(fo);
//                            out.writeObject(dsGiaoTrinh);
//                            out.close();
//                            fo.close();
//                     } catch (FileNotFoundException e) {
//                            e.printStackTrace();
//                     } catch (IOException e) {
//                            e.printStackTrace();
//                     }
                     WriteDataUtil.writeGiaoTrinhData(dsGiaoTrinh);
                     LoadTable();
                     JOptionPane.showMessageDialog(rootPane, "Xóa thành công!");
              } else {
                     JOptionPane.showMessageDialog(rootPane, "Chọn dòng cần xóa");
              }
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        LoadFile();

              int dongchon = tblGiaoTrinh.getSelectedRow();
              if (dongchon != -1) {
                     if (checksua()) {
                            MonHoc mh = new MonHoc();
                            GiangVien cb = new GiangVien();
                            ArrayList<GiangVien> cactg = new ArrayList<>();
                            Khoa k = new Khoa();
                            mh.setTenMon(tbTenMon.getText());
                            int sotc = Integer.parseInt(tbsoTC.getText());
                            mh.setSoTC(sotc);
                            for (Khoa x : dsKhoa) {
                                   if (x.getTenKhoa().toLowerCase().equals(cboKhoa.getSelectedItem().toString().toLowerCase())) {
                                          k = x;
                                   }
                            }
                            for (GiangVien x : dsGiangVien) {
                                   if (x.getTenGV().toLowerCase().equals(cboChuBien.getSelectedItem().toString().toLowerCase())) {
                                          cb = x;
                                   }
                            }
                            if (listCacTacGia.getSelectedIndex() >= 0) {
                                List<String> selectedNames = listCacTacGia.getSelectedValuesList();
                                    for (String name : selectedNames) {
                                        for (GiangVien x : dsGiangVien) {                           
                                            if (x.getTenGV().toLowerCase().equals(name.toLowerCase())) {
                                                if (!cactg.contains(x)) { // Kiểm tra xem x đã tồn tại trong danh sách cactg chưa
                                                    cactg.add(x);
                                                }
                                                break;
                                            }
                                        }
                                    }
                            } else {
                                   GiaoTrinh gt = new GiaoTrinh();
                                   gt = dsGiaoTrinh.get(dongchon);
                                   cactg = gt.getCacTacGia();

                            }

                            Date dbd = new Date();
                            String ngaybd = tbTGBD.getText();
                            String[] bd = ngaybd.split("/");
                            dbd.setD(Integer.parseInt(bd[0]));
                            dbd.setM(Integer.parseInt(bd[1]));
                            dbd.setY(Integer.parseInt(bd[2]));
                            Date dkt = new Date();
                            String ngaykt = tbTGKT.getText();
                            String[] kt = ngaykt.split("/");
                            dkt.setD(Integer.parseInt(kt[0]));
                            dkt.setM(Integer.parseInt(kt[1]));
                            dkt.setY(Integer.parseInt(kt[2]));
                            dsGiaoTrinh.set(dongchon, new GiaoTrinh(tbMaGT.getText(), tbTenGT.getText(), mh, cb, cactg, k, dbd, dkt));
//                            try {
//                                   FileOutputStream fo = new FileOutputStream("GIAOTRINH.txt");
//                                   ObjectOutputStream out = new ObjectOutputStream(fo);
//                                   out.writeObject(dsGiaoTrinh);
//                                   out.close();
//                                   fo.close();
//                            } catch (FileNotFoundException e) {
//                                   e.printStackTrace();
//                            } catch (IOException e) {
//                                   e.printStackTrace();
//                            }
                            WriteDataUtil.writeGiaoTrinhData(dsGiaoTrinh);
                            LoadTable();
                            JOptionPane.showMessageDialog(rootPane, "Sửa thành công!");
                     }

              } else {
                     JOptionPane.showMessageDialog(rootPane, "Chọn giáo trình cần sửa!");
              }        
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnTimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimActionPerformed
        int index = cboxTim.getSelectedIndex();
        LoadFile();
        if (index == 0 || index == -1) {
            String maGT = tbMaGT.getText();
            if (maGT.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "Nhập mã giáo trình cần tìm!");
            } else {
                boolean check = false;
                for (GiaoTrinh item : dsGiaoTrinh) {
                    if (item.getMaGT().equals(maGT)) {
                        check = true;
                        break;
                    }
                }
                if (!check) {
                    JOptionPane.showMessageDialog(rootPane, "Không tồn tại giáo trình có mã cần tìm!");
                } else {
                    ArrayList<GiaoTrinh> ds = new ArrayList<GiaoTrinh>();
                    for (GiaoTrinh item : dsGiaoTrinh) {
                        if (item.getMaGT().equals(maGT)) {
                            ds.add(item);
                        }
                    }
                    JTable table = new JTable();
                    DefaultTableModel model = new DefaultTableModel();
                    Object[] columnNames = {"Mã GT", "Tên GT", "Tên Môn", "Số TC", "Chủ Biên", "Các Tác Giả", "Khoa", "TGBatDau", "TGKetThuc", "Trạng Thái"};
                    model.setColumnIdentifiers(columnNames);
                    Object[][] rowData = new Object[ds.size()][10];
                   for (int i = 0; i < ds.size(); i++) {
                     rowData[i][0] = ds.get(i).getMaGT();
                     rowData[i][1] = ds.get(i).getTenGT();
                     rowData[i][2] = ds.get(i).getTenMon().getTenMon();
                     rowData[i][3] = ds.get(i).getTenMon().getSoTC();
                     rowData[i][4] = ds.get(i).getChuBien().getTenGV();
                     rowData[i][5] = ds.get(i).getCacTacGia().toString();
                     rowData[i][6] = ds.get(i).getKhoa().getTenKhoa();
                     rowData[i][7] = ds.get(i).getTgbd();
                     rowData[i][8] = ds.get(i).getTgkt();
                     rowData[i][9] = ds.get(i).isDangKy();
              }
                    model.setDataVector(rowData, columnNames);
                    this.tblGiaoTrinh.setModel(model);
                    this.add(new JScrollPane(table));
                    this.pack();
                    this.setVisible(true);
                }
            }
        } else if (index == 1) {
            String tenGT = tbTenGT.getText();
            if (tenGT.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "Nhập tên Giáo Trình cần tìm!");
            } else {
                boolean check = false;
                for (GiaoTrinh item : dsGiaoTrinh) {
                    if (item.getTenGT().contains(tenGT)) {
                        check = true;
                        break;
                    }
                }
                if (!check) {
                    JOptionPane.showMessageDialog(rootPane, "Không tồn tại giáo trình có tên cần tìm!");
                } else {
                    ArrayList<GiaoTrinh> ds = new ArrayList<GiaoTrinh>();
                    for (GiaoTrinh item : dsGiaoTrinh) {
                        if (item.getTenGT().contains(tenGT)) {
                            ds.add(item);
                        }
                    }
                    JTable table = new JTable();
                    DefaultTableModel model = new DefaultTableModel();
                    Object[] columnNames = {"Mã GT", "Tên GT", "Tên Môn", "Số TC", "Chủ Biên", "Các Tác Giả", "Khoa", "TGBatDau", "TGKetThuc", "Trạng Thái"};
                    model.setColumnIdentifiers(columnNames);
                    Object[][] rowData = new Object[ds.size()][10];
                     for (int i = 0; i < ds.size(); i++) {
                     rowData[i][0] = ds.get(i).getMaGT();
                     rowData[i][1] = ds.get(i).getTenGT();
                     rowData[i][2] = ds.get(i).getTenMon().getTenMon();
                     rowData[i][3] = ds.get(i).getTenMon().getSoTC();
                     rowData[i][4] = ds.get(i).getChuBien().getTenGV();
                     rowData[i][5] = ds.get(i).getCacTacGia().toString();
                     rowData[i][6] = ds.get(i).getKhoa().getTenKhoa();
                     rowData[i][7] = ds.get(i).getTgbd();
                     rowData[i][8] = ds.get(i).getTgkt();
                     rowData[i][9] = ds.get(i).isDangKy()? "Đã đăng kí" : "Chưa đăng kí";
                    }
                    model.setDataVector(rowData, columnNames);
                    this.tblGiaoTrinh.setModel(model);
                    this.add(new JScrollPane(table));
                    this.pack();
                    this.setVisible(true);
                    }
                }
        } else if (index == 2) {
            String tenMon = tbTenMon.getText();
            if (tenMon.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "Nhập tên môn cần tìm!");
            } else {
                boolean check = false;
                for (GiaoTrinh item : dsGiaoTrinh) {
                    if (item.getTenMon().getTenMon().contains(tenMon)) {
                        check = true;
                        break;
                    }
                }
                if (!check) {
                    JOptionPane.showMessageDialog(rootPane, "Không tồn tạị tên môn cần tìm!");
                } else {
                    ArrayList<GiaoTrinh> ds = new ArrayList<GiaoTrinh>();
                    for (GiaoTrinh item : dsGiaoTrinh) {
                        if (item.getTenMon().getTenMon().contains(tenMon)) {
                            ds.add(item);
                        }
                    }
                    JTable table = new JTable();
                    DefaultTableModel model = new DefaultTableModel();
                    Object[] columnNames = {"Mã GT", "Tên GT", "Tên Môn", "Số TC", "Chủ Biên", "Các Tác Giả", "Khoa", "TGBatDau", "TGKetThuc", "Trạng Thái"};
                    model.setColumnIdentifiers(columnNames);
                    Object[][] rowData = new Object[ds.size()][10];
                     for (int i = 0; i < ds.size(); i++) {
                     rowData[i][0] = ds.get(i).getMaGT();
                     rowData[i][1] = ds.get(i).getTenGT();
                     rowData[i][2] = ds.get(i).getTenMon().getTenMon();
                     rowData[i][3] = ds.get(i).getTenMon().getSoTC();
                     rowData[i][4] = ds.get(i).getChuBien().getTenGV();
                     rowData[i][5] = ds.get(i).getCacTacGia().toString();
                     rowData[i][6] = ds.get(i).getKhoa().getTenKhoa();
                     rowData[i][7] = ds.get(i).getTgbd();
                     rowData[i][8] = ds.get(i).getTgkt();
                     rowData[i][9] = ds.get(i).isDangKy()? "Đã đăng kí" : "Chưa đăng kí";
                    }
                    model.setDataVector(rowData, columnNames);
                    this.tblGiaoTrinh.setModel(model);
                    this.add(new JScrollPane(table));
                    this.pack();
                    this.setVisible(true);
                }
            }
        }else if (index == 3) {
            String soTCStr = tbsoTC.getText();
            if (soTCStr.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "Nhập số tín chỉ cần tìm!");
            } else {
                int soTC = Integer.parseInt(soTCStr);
                boolean check = false;
                for (GiaoTrinh item : dsGiaoTrinh) {
                    if (item.getTenMon().getSoTC()== soTC) {
                        check = true;
                        break;
                    }
                }
                if (!check) {
                    JOptionPane.showMessageDialog(rootPane, "Không tồn tạị số tín chỉ cần tìm!");
                } else {
                    ArrayList<GiaoTrinh> ds = new ArrayList<GiaoTrinh>();
                    for (GiaoTrinh item : dsGiaoTrinh) {
                        if (item.getTenMon().getSoTC() == soTC) {
                            ds.add(item);
                        }
                    }
                    JTable table = new JTable();
                    DefaultTableModel model = new DefaultTableModel();
                    Object[] columnNames = {"Mã GT", "Tên GT", "Tên Môn", "Số TC", "Chủ Biên", "Các Tác Giả", "Khoa", "TGBatDau", "TGKetThuc", "Trạng Thái"};
                    model.setColumnIdentifiers(columnNames);
                    Object[][] rowData = new Object[ds.size()][10];
                     for (int i = 0; i < ds.size(); i++) {
                     rowData[i][0] = ds.get(i).getMaGT();
                     rowData[i][1] = ds.get(i).getTenGT();
                     rowData[i][2] = ds.get(i).getTenMon().getTenMon();
                     rowData[i][3] = ds.get(i).getTenMon().getSoTC();
                     rowData[i][4] = ds.get(i).getChuBien().getTenGV();
                     rowData[i][5] = ds.get(i).getCacTacGia().toString();
                     rowData[i][6] = ds.get(i).getKhoa().getTenKhoa();
                     rowData[i][7] = ds.get(i).getTgbd();
                     rowData[i][8] = ds.get(i).getTgkt();
                     rowData[i][9] = ds.get(i).isDangKy()? "Đã đăng kí" : "Chưa đăng kí";
                    }
                    model.setDataVector(rowData, columnNames);
                    this.tblGiaoTrinh.setModel(model);
                    this.add(new JScrollPane(table));
                    this.pack();
                    this.setVisible(true);
                }
            }
        }else if (index == 4) {
            String khoa = cboKhoa.getSelectedItem().toString();
            if (khoa.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "Nhập tên khoa bạn cần tìm!");
            } else {
                boolean check = false;
                for (GiaoTrinh item : dsGiaoTrinh) {
                    if (item.getKhoa().getTenKhoa().contains(khoa)) {
                        check = true;
                        break;
                    }
                }
                if (!check) {
                    JOptionPane.showMessageDialog(rootPane, "Không tồn tạị khoa cần tìm!");
                } else {
                    ArrayList<GiaoTrinh> ds = new ArrayList<GiaoTrinh>();
                    for (GiaoTrinh item : dsGiaoTrinh) {
                        if (item.getKhoa().getTenKhoa().contains(khoa)) {
                            ds.add(item);
                        }
                    }
                    JTable table = new JTable();
                    DefaultTableModel model = new DefaultTableModel();
                    Object[] columnNames = {"Mã GT", "Tên GT", "Tên Môn", "Số TC", "Chủ Biên", "Các Tác Giả", "Khoa", "TGBatDau", "TGKetThuc", "Trạng Thái"};
                    model.setColumnIdentifiers(columnNames);
                    Object[][] rowData = new Object[ds.size()][10];
                     for (int i = 0; i < ds.size(); i++) {
                     rowData[i][0] = ds.get(i).getMaGT();
                     rowData[i][1] = ds.get(i).getTenGT();
                     rowData[i][2] = ds.get(i).getTenMon().getTenMon();
                     rowData[i][3] = ds.get(i).getTenMon().getSoTC();
                     rowData[i][4] = ds.get(i).getChuBien().getTenGV();
                     rowData[i][5] = ds.get(i).getCacTacGia().toString();
                     rowData[i][6] = ds.get(i).getKhoa().getTenKhoa();
                     rowData[i][7] = ds.get(i).getTgbd();
                     rowData[i][8] = ds.get(i).getTgkt();
                     rowData[i][9] = ds.get(i).isDangKy()? "Đã đăng kí" : "Chưa đăng kí";
                    }
                    model.setDataVector(rowData, columnNames);
                    this.tblGiaoTrinh.setModel(model);
                    this.add(new JScrollPane(table));
                    this.pack();
                    this.setVisible(true);
                }
            }
        }else if (index == 5) {
            
            String chuBien = cboChuBien.getSelectedItem().toString();
            if (chuBien.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "Nhập tên chủ biên bạn cần tìm!");
            } else {
                boolean check = false;
                for (GiaoTrinh item : dsGiaoTrinh) {
                    if (item.getChuBien().getTenGV().equals(chuBien)) {
                        check = true;
                        break;
                    }
                }
                if (!check) {
                    JOptionPane.showMessageDialog(rootPane, "Không tồn tạị chủ biên bạn cần tìm!");
                    System.out.println(chuBien);
                } else {
                    ArrayList<GiaoTrinh> ds = new ArrayList<GiaoTrinh>();
                    for (GiaoTrinh item : dsGiaoTrinh) {
                        if (item.getChuBien().getTenGV().equals(chuBien)) {
                            ds.add(item);
                        }
                    }
                    JTable table = new JTable();
                    DefaultTableModel model = new DefaultTableModel();
                    Object[] columnNames = {"Mã GT", "Tên GT", "Tên Môn", "Số TC", "Chủ Biên", "Các Tác Giả", "Khoa", "TGBatDau", "TGKetThuc", "Trạng Thái"};
                    model.setColumnIdentifiers(columnNames);
                    Object[][] rowData = new Object[ds.size()][10];
                     for (int i = 0; i < ds.size(); i++) {
                     rowData[i][0] = ds.get(i).getMaGT();
                     rowData[i][1] = ds.get(i).getTenGT();
                     rowData[i][2] = ds.get(i).getTenMon().getTenMon();
                     rowData[i][3] = ds.get(i).getTenMon().getSoTC();
                     rowData[i][4] = ds.get(i).getChuBien().getTenGV();
                     rowData[i][5] = ds.get(i).getCacTacGia().toString();
                     rowData[i][6] = ds.get(i).getKhoa().getTenKhoa();
                     rowData[i][7] = ds.get(i).getTgbd();
                     rowData[i][8] = ds.get(i).getTgkt();
                     rowData[i][9] = ds.get(i).isDangKy()? "Đã đăng kí" : "Chưa đăng kí";
                    }
                    model.setDataVector(rowData, columnNames);
                    this.tblGiaoTrinh.setModel(model);
                    this.add(new JScrollPane(table));
                    this.pack();
                    this.setVisible(true);
                }
            }
        }else if (index == 6) {
            
            String dateBD = tbTGBD.getText();
            String dateKT = tbTGKT.getText();
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

            if (dateBD.isEmpty() || dateKT.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "Nhập ngày bắt đầu và ngày kết thúc!");
            } else {
            try{
                java.util.Date ngayBD = sdf.parse(dateBD);
                java.util.Date ngayKT = sdf.parse(dateKT);

                ArrayList<GiaoTrinh> ds = new ArrayList<GiaoTrinh>();

                for (GiaoTrinh giaoTrinh : dsGiaoTrinh) {
                    Calendar cal = Calendar.getInstance();
                    cal.set(Calendar.YEAR, giaoTrinh.getTgbd().getY());
                    cal.set(Calendar.MONTH, giaoTrinh.getTgbd().getM());
                    cal.set(Calendar.DAY_OF_MONTH, giaoTrinh.getTgbd().getD());
                    java.util.Date ngayBDGiaoTrinh = cal.getTime();
    
                    cal.set(Calendar.YEAR, giaoTrinh.getTgkt().getY());
                    cal.set(Calendar.MONTH, giaoTrinh.getTgkt().getM());
                    cal.set(Calendar.DAY_OF_MONTH, giaoTrinh.getTgkt().getD());
                    java.util.Date ngayKTGiaoTrinh = cal.getTime();

                    if (!ngayBDGiaoTrinh.before(ngayBD) && !ngayKTGiaoTrinh.after(ngayKT)) {
                        ds.add(giaoTrinh);
                    }
                }

                if (ds.isEmpty()) {
                    JOptionPane.showMessageDialog(rootPane, "Không tồn tại giáo trình trong khoảng thời gian đã nhập!");
                } else {
                    JTable table = new JTable();
                    DefaultTableModel model = new DefaultTableModel();
                    Object[] columnNames = {"Mã GT", "Tên GT", "Tên Môn", "Số TC", "Chủ Biên", "Các Tác Giả", "Khoa", "TGBatDau", "TGKetThuc", "Trạng Thái"};
                    model.setColumnIdentifiers(columnNames);
                    Object[][] rowData = new Object[ds.size()][10];

                for (int i = 0; i < ds.size(); i++) {
                    rowData[i][0] = ds.get(i).getMaGT();
                    rowData[i][1] = ds.get(i).getTenGT();
                    rowData[i][2] = ds.get(i).getTenMon().getTenMon();
                    rowData[i][3] = ds.get(i).getTenMon().getSoTC();
                    rowData[i][4] = ds.get(i).getChuBien().getTenGV();
                    rowData[i][5] = ds.get(i).getCacTacGia().toString();
                    rowData[i][6] = ds.get(i).getKhoa().getTenKhoa();
                    rowData[i][7] = ds.get(i).getTgbd();
                    rowData[i][8] = ds.get(i).getTgkt();
                    rowData[i][9] = ds.get(i).isDangKy()? "Đã đăng kí" : "Chưa đăng kí";
                }
                model.setDataVector(rowData, columnNames);
                this.tblGiaoTrinh.setModel(model);
                this.add(new JScrollPane(table));
                this.pack();
                this.setVisible(true);
                }
            }catch (ParseException e) {
                JOptionPane.showMessageDialog(rootPane, "Định dạng ngày không đúng! Hãy sử dụng định dạng dd/MM/yyyy");
                }
            }
        }
    }//GEN-LAST:event_btnTimActionPerformed

    
    
    
    
    private void btnDangKiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDangKiActionPerformed
        int dongchon = tblGiaoTrinh.getSelectedRow(); // Lấy dòng đã chọn trong JTable
        if (dongchon != -1) {
            GiaoTrinh gt = dsGiaoTrinh.get(dongchon); // Lấy đối tượng GiaoTrinh tương ứng với dòng đã chọn
            if (gt.isDangKy()) {
            JOptionPane.showMessageDialog(this, "Giáo trình này đã được đăng kí!");
            } else {
            gt.setDangKy(true); // Đặt trạng thái đăng kí thành true
//            try {
//                FileOutputStream fo = new FileOutputStream("GIAOTRINH.txt");
//                ObjectOutputStream out = new ObjectOutputStream(fo);
//                out.writeObject(dsGiaoTrinh);
//                out.close();
//                fo.close();
//            } catch (FileNotFoundException e) {
//                e.printStackTrace();
//            } catch (IOException e) {
//                e.printStackTrace();
//            }
            WriteDataUtil.writeGiaoTrinhData(dsGiaoTrinh);
            LoadTable();
            JOptionPane.showMessageDialog(this, "Đăng kí thành công");
        }
    }

    }//GEN-LAST:event_btnDangKiActionPerformed

    private void btnHuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHuyActionPerformed
        int dongchon = tblGiaoTrinh.getSelectedRow(); // Lấy dòng đã chọn trong JTable
        if (dongchon != -1) {
            GiaoTrinh gt = dsGiaoTrinh.get(dongchon); // Lấy đối tượng GiaoTrinh tương ứng với dòng đã chọn
            if (!gt.isDangKy()) {
                JOptionPane.showMessageDialog(this, "Giáo trình này chưa được đăng kí!");
            } else {
            gt.setDangKy(false); // Đặt trạng thái đăng kí thành true
//            try {
//                FileOutputStream fo = new FileOutputStream("GIAOTRINH.txt");
//                ObjectOutputStream out = new ObjectOutputStream(fo);
//                out.writeObject(dsGiaoTrinh);
//                out.close();
//                fo.close();
//            } catch (FileNotFoundException e) {
//                e.printStackTrace();
//            } catch (IOException e) {
//                e.printStackTrace();
//            }
            WriteDataUtil.writeGiaoTrinhData(dsGiaoTrinh);

        LoadTable();
        JOptionPane.showMessageDialog(this, "Hủy Đăng kí thành công");
        }
    }
    }//GEN-LAST:event_btnHuyActionPerformed

    private void btnQuayLaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuayLaiActionPerformed
        setVisible(false);
        Menu mainMenu = new Menu();
        mainMenu.setVisible(true);
    }//GEN-LAST:event_btnQuayLaiActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
     LoadTable();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void cboChuBienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboChuBienActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboChuBienActionPerformed

    private void tbTenMonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbTenMonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tbTenMonActionPerformed

    private boolean check() {
              if ("".equals(tbMaGT.getText())) {
                     JOptionPane.showMessageDialog(rootPane, "Cần nhập đủ thông tin");
                     return false;
              } else {
                     for (GiaoTrinh x : dsGiaoTrinh) {
                            if (x.getMaGT().equals(tbMaGT.getText())) {
                                   JOptionPane.showMessageDialog(rootPane, "Mã giáo trình đã tồn tại");
                                   return false;
                            }
                     }

              }
              if ("".equals(tbTenGT.getText())) {
                     JOptionPane.showMessageDialog(rootPane, "Cần nhập đủ thông tin");
                     return false;
              }
              if ("".equals(tbTenMon.getText())) {
                     JOptionPane.showMessageDialog(rootPane, "Cần nhập đủ thông tin");
                     return false;
              }
              if ("".equals(tbsoTC.getText())) {
                     JOptionPane.showMessageDialog(rootPane, "Cần nhập đủ thông tin");
                     return false;
              } else {
                     try {
                            int sotc = Integer.parseInt(tbsoTC.getText());
                     } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(rootPane, "Số tín chỉ phải là số");
                            return false;
                     }
              }
               if (listCacTacGia.getSelectedIndex() < 0) {
                    JOptionPane.showMessageDialog(rootPane, "Chọn danh sách các tác giả!");
                    return false;
               }
              if ("".equals(tbTGBD.getText())) {
                     JOptionPane.showMessageDialog(rootPane, "Cần nhập đủ thông tin");
                     return false;
              } else {
                     try {
                            java.util.Date s = new SimpleDateFormat("dd/MM/yyyy").parse(tbTGBD.getText());
                     } catch (Exception e) {
                            e.printStackTrace();
                            JOptionPane.showMessageDialog(rootPane, "Ngày bắt đâu cần nhập đúng định dạng dd/MM/yyyy");
                            return false;
                     }
              }
              if ("".equals(tbTGKT.getText())) {
                     JOptionPane.showMessageDialog(rootPane, "Cần nhập đủ thông tin");
                     return false;
              } else {
                     try {
                            java.util.Date s = new SimpleDateFormat("dd/MM/yyyy").parse(tbTGBD.getText());
                     } catch (Exception e) {
                            e.printStackTrace();
                            JOptionPane.showMessageDialog(rootPane, "Ngày kêt thúc cần nhập đúng định dạng dd/MM/yyyy");
                            return false;
                     }
              }
               Map<String, MonHoc> mapMonHoc = buildMapTenMonHoc();
               String tenMon = tbTenMon.getText().trim();
               var monhoc = mapMonHoc.get(tenMon);
              if (monhoc == null){
                  JOptionPane.showMessageDialog(rootPane, "Môn học không tồn tại");
                  return false;
              }
              return true;
       }
    
    private boolean checksua() {
              int dongchon = tblGiaoTrinh.getSelectedRow();
              GiaoTrinh gt = new GiaoTrinh();
              gt = dsGiaoTrinh.get(dongchon);
              if (gt.getMaGT().toLowerCase().equals(tbMaGT.getText().toLowerCase()) != true) {
                     JOptionPane.showMessageDialog(rootPane, "Không được sửa mã giáo trình");
                     return false;
              }
              if ("".equals(tbMaGT.getText())) {
                     JOptionPane.showMessageDialog(rootPane, "Cần nhập đủ thông tin");
                     return false;
              }
              if ("".equals(tbTenGT.getText())) {
                     JOptionPane.showMessageDialog(rootPane, "Cần nhập đủ thông tin");
                     return false;
              }
              if ("".equals(tbTenMon.getText())) {
                     JOptionPane.showMessageDialog(rootPane, "Cần nhập đủ thông tin");
                     return false;
              }
              if ("".equals(tbsoTC.getText())) {
                     JOptionPane.showMessageDialog(rootPane, "Cần nhập đủ thông tin");
                     return false;
              } else {
                     try {
                            int sotc = Integer.parseInt(tbsoTC.getText());
                     } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(rootPane, "Số tín chỉ phải là số");
                            return false;
                     }
              }

              if ("".equals(tbTGBD.getText())) {
                     JOptionPane.showMessageDialog(rootPane, "Cần nhập đủ thông tin");
                     return false;
              } else {
                     try {
                            java.util.Date s = new SimpleDateFormat("dd/MM/yyyy").parse(tbTGBD.getText());
                     } catch (Exception e) {
                            e.printStackTrace();
                            JOptionPane.showMessageDialog(rootPane, "Ngày bắt đâu cần nhập đúng định dạng dd/MM/yyyy");
                            return false;
                     }
              }
              if ("".equals(tbTGKT.getText())) {
                     JOptionPane.showMessageDialog(rootPane, "Cần nhập đủ thông tin");
                     return false;
              } else {
                     try {
                            java.util.Date s = new SimpleDateFormat("dd/MM/yyyy").parse(tbTGBD.getText());
                     } catch (Exception e) {
                            e.printStackTrace();
                            JOptionPane.showMessageDialog(rootPane, "Ngày kêt thúc cần nhập đúng định dạng dd/MM/yyyy");
                            return false;
                     }
              }
              return true;

       }

    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QL_QuyTrinh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QL_QuyTrinh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QL_QuyTrinh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QL_QuyTrinh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QL_QuyTrinh().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDangKi;
    private javax.swing.JButton btnHuy;
    private javax.swing.JButton btnQuayLai;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnTim;
    private javax.swing.JButton btnXoa;
    private javax.swing.JComboBox<String> cboChuBien;
    private javax.swing.JComboBox<String> cboKhoa;
    private javax.swing.JComboBox<String> cboxTim;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> listCacTacGia;
    private javax.swing.JTextField tbMaGT;
    private javax.swing.JTextField tbTGBD;
    private javax.swing.JTextField tbTGKT;
    private javax.swing.JTextField tbTenGT;
    private javax.swing.JTextField tbTenMon;
    private javax.swing.JTable tblGiaoTrinh;
    private javax.swing.JTextField tbsoTC;
    // End of variables declaration//GEN-END:variables

}
